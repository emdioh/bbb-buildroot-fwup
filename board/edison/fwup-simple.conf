# Firmware configuration file for the Intel Edison
#
# This file provides a minimum configuration if you're just interested
# in creating a raw image file that you can copy to an SDCard using dd(1).
# It doesn't support upgrading an image on the Intel Edison.

# Default ROOTFS if not specified
define(ROOTFS, "${PROJECT_ROOT}/buildroot/output/images/rootfs.ext2")

# Image layout
# +------------------------+
# | MBR                    |
# +------------------------+
# | u-boot.bin             |
# +------------------------+
# | U-Boot environment     |
# +------------------------+
# | U-Boot environment     |
# +------------------------+
# | Rootfs (EXT4)          |
# +------------------------+
# | Unused                 |
# +------------------------+
# | Unused                 |
# +------------------------+

define(BOOT_PART_OFFSET, 2048)
define(BOOT_WRITE_OFFSET, 2056) # Skip 8 blocks (4K) before writing the U-Boot image
define(UBOOT_ENV_1_OFFSET, 6144)
define(UBOOT_ENV_2_OFFSET, 12288)

# Let the rootfs have room to grow up to 128 MiB (256K 512-byte blocks)
define(ROOTFS_PART_OFFSET, 14336)
define(ROOTFS_PART_COUNT, 262144)

# Firmware metadata
meta-product = "Demo Image for the Intel Edison"
meta-description = "This image boots to Linux."
meta-version = "0.1"
meta-platform = "edison"
meta-architecture = "x86"
meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource u-boot.img {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/u-boot.bin"
}
# A current limitation of fwup is that if a file needs to be written two places,
# it needs to be included twice. The uboot environment is small and compresses, so
# this isn't a huge deal.
file-resource uboot-env1.bin {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/uboot-env.bin"
}
file-resource uboot-env2.bin {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/uboot-env.bin"
}
file-resource rootfs.ext2 {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    include-osip = true
    osip-major = 1
    osip-minor = 0
    osip-num-pointers = 1

    osii 0 {
        os-major = 0
        os-minor = 0
        start-block-offset = ${BOOT_PART_OFFSET}
        ddr-load-address = 0x01100000
        entry-point = 0x01101000
        image-size-blocks = 0x0000c000  # This need to be huge since xfstk uses it to figure out the size.
        attribute = 0x0f
    }

    partition 0 {
        block-offset = ${ROOTFS_PART_OFFSET}
        block-count = ${ROOTFS_PART_COUNT}
        type = 0x83 # Linux
    }
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)
    }

    on-resource u-boot.img { raw_write(${BOOT_WRITE_OFFSET}) }
    on-resource uboot-env1.bin { raw_write(${UBOOT_ENV_1_OFFSET}) }
    on-resource uboot-env2.bin { raw_write(${UBOOT_ENV_2_OFFSET}) }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_PART_OFFSET})
    }

    on-finish {
    }
}
