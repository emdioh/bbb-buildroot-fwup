From 3f9ca44ed9f42d2e883d9b627dc6c41e3ad8ea98 Mon Sep 17 00:00:00 2001
From: Frank Hunleth <fhunleth@troodon-software.com>
Date: Sun, 10 Aug 2014 17:12:32 -0400
Subject: [PATCH] libconfuse: add patch to fix env bug

This patch has been integrated into the upstream project, but upstream
has not released a new version yet.

Signed-off-by: Frank Hunleth <fhunleth@troodon-software.com>
---
 ...-string-environment-variable-substitution.patch | 137 +++++++++++++++++++++
 1 file changed, 137 insertions(+)
 create mode 100644 package/libconfuse/libconfuse-0001-Fix-mid-string-environment-variable-substitution.patch

diff --git a/package/libconfuse/libconfuse-0001-Fix-mid-string-environment-variable-substitution.patch b/package/libconfuse/libconfuse-0001-Fix-mid-string-environment-variable-substitution.patch
new file mode 100644
index 0000000..d96ca85
--- /dev/null
+++ b/package/libconfuse/libconfuse-0001-Fix-mid-string-environment-variable-substitution.patch
@@ -0,0 +1,137 @@
+From 283996250d5ee2645dad83a76621b6b0e3e3448a Mon Sep 17 00:00:00 2001
+From: Frank Hunleth <fhunleth@troodon-software.com>
+Date: Tue, 3 Jun 2014 14:06:59 -0400
+Subject: [PATCH] Fix mid-string environment variable substitution
+
+This change fixes the case where environment substitution did not happen
+in the middle of string parameters. For example:
+
+parameter = "sometext/${ENVVAR}"
+
+In this case, ${ENVVAR} was not expanded since the flex rule to match the
+whole string took precedence over the flex rule to perform environment
+variable substitution. Flex chooses longer matches over shorter matches.
+The fix is to modify the normal character matching rule to match one
+character at a time.
+
+A unit test was added to verify the fix and check that it didn't break
+other string or environment processing.
+
+Signed-off-by: Frank Hunleth <fhunleth@troodon-software.com>
+---
+ src/lexer.l       |  7 ++----
+ tests/Makefile.am |  3 ++-
+ tests/env.c       | 70 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ 3 files changed, 74 insertions(+), 6 deletions(-)
+ create mode 100644 tests/env.c
+
+diff --git a/src/lexer.l b/src/lexer.l
+index b752a27..9a7e5e7 100644
+--- a/src/lexer.l
++++ b/src/lexer.l
+@@ -182,11 +182,8 @@ static YY_BUFFER_STATE string_scan_state = 0;
+ <dq_str>\\.  {
+     qputc(yytext[1]);
+ }
+-<dq_str>[^\\\"\n]+  {
+-    char *yptr = yytext;
+-    while(*yptr) {
+-        qputc(*yptr++);
+-    }
++<dq_str>[^\\\"\n]  {
++    qputc(yytext[0]);
+ }
+ 
+     /* single-quoted string ('...') */
+diff --git a/tests/Makefile.am b/tests/Makefile.am
+index 4237221..006dd42 100644
+--- a/tests/Makefile.am
++++ b/tests/Makefile.am
+@@ -1,6 +1,7 @@
+ TESTS = suite_single suite_dup suite_func suite_list \
+ 	suite_validate list_plus_syntax section_title_dupes \
+-	single_title_sections quote_before_print include
++	single_title_sections quote_before_print include \
++	env
+ check_PROGRAMS=$(TESTS)
+ 
+ LDADD=-L../src ../src/libconfuse.la $(LTLIBINTL)
+diff --git a/tests/env.c b/tests/env.c
+new file mode 100644
+index 0000000..c17b5c5
+--- /dev/null
++++ b/tests/env.c
+@@ -0,0 +1,70 @@
++/* Test cfg_include when called from a buffer
++ */
++
++#include <string.h>
++#include <stdlib.h>
++#include "check_confuse.h"
++
++cfg_opt_t opts[] =
++{
++        CFG_STR("parameter", NULL, CFGF_NONE),
++        CFG_END()
++};
++
++static int
++testconfig(const char *buf, const char *parameter)
++{
++	cfg_t *cfg = cfg_init(opts, CFGF_NONE);
++        if (!cfg)
++            return 0;
++
++	if (cfg_parse_buf(cfg, buf) != CFG_SUCCESS)
++            return 0;
++
++        char *param = cfg_getstr(cfg, "parameter");
++        if (!param)
++            return 0;
++
++        if (strcmp(param, parameter) != 0)
++            return 0;
++
++	cfg_free(cfg);
++        return 1;
++}
++
++int
++main(void)
++{
++	fail_unless(setenv("MYVAR", "testing", 1) == 0);
++	fail_unless(unsetenv("MYUNSETVAR") == 0);
++
++        /* Check basic string parsing */
++        fail_unless(testconfig("parameter=\"abc\\ndef\"", "abc\ndef"));
++        fail_unless(testconfig("parameter=\"abc\\adef\"", "abc\adef"));
++        fail_unless(testconfig("parameter=\"abc\\040def\"", "abc def"));
++        fail_unless(testconfig("parameter=\"abc\\x20def\"", "abc def"));
++        fail_unless(testconfig("parameter=\"${}\"", ""));
++
++        /* Check unquoted environment variable handling */
++        fail_unless(testconfig("parameter=${MYVAR}", "testing"));
++        fail_unless(testconfig("parameter=${MYVAR:-default}", "testing"));
++        fail_unless(testconfig("parameter=${MYUNSETVAR}", ""));
++        fail_unless(testconfig("parameter=${MYUNSETVAR:-default}", "default"));
++
++        /* Check quoted environment variable handling */
++        fail_unless(testconfig("parameter=\"${MYVAR}\"", "testing"));
++        fail_unless(testconfig("parameter=\"${MYVAR:-default}\"", "testing"));
++        fail_unless(testconfig("parameter=\"${MYUNSETVAR}\"", ""));
++        fail_unless(testconfig("parameter=\"${MYUNSETVAR:-default}\"", "default"));
++
++        /* Check quoted environment variable handling in the middle of strings */
++        fail_unless(testconfig("parameter=\"text_${MYVAR}\"", "text_testing"));
++        fail_unless(testconfig("parameter=\"${MYVAR}_text\"", "testing_text"));
++        fail_unless(testconfig("parameter=\"start_${MYVAR}_end\"", "start_testing_end"));
++
++        /* Check single quoted environment variable handling */
++        fail_unless(testconfig("parameter='${MYVAR}'", "${MYVAR}"));
++
++	return 0;
++}
++
+-- 
+1.9.1
+
-- 
1.9.1

